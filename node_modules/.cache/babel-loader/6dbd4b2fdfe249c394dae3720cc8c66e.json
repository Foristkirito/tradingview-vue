{"remainingRequest":"/Users/suhang/Template/tradingview/demo2/node_modules/babel-loader/lib/index.js!/Users/suhang/Template/tradingview/demo2/src/request/index.js","dependencies":[{"path":"/Users/suhang/Template/tradingview/demo2/src/request/index.js","mtime":1596811915303},{"path":"/Users/suhang/Template/tradingview/demo2/node_modules/cache-loader/dist/cjs.js","mtime":1598844172828},{"path":"/Users/suhang/Template/tradingview/demo2/node_modules/babel-loader/lib/index.js","mtime":1598844172845}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBtb2NrQ29uZmlnIGZyb20gJy4vbW9jay9jb25maWcnOyAvL21vY2vmqKHmi5/lmajphY3nva4KLy8gaW1wb3J0IHN0YXR1c0NvZGUgZnJvbSAnLi9zdGF0dXNDb2RlJzsKCnZhciAkaHR0cCA9IGF4aW9zLmNyZWF0ZSh7CiAgYmFzZVVSTDogbW9ja0NvbmZpZyA/ICcnIDogcHJvY2Vzcy5lbnYuVlVFX0FQUF9VUkwsCiAgdGltZW91dDogMTAwMCAqIDEyCn0pOyAvLyDorr7nva5wb3N06K+35rGC5aS0CgokaHR0cC5kZWZhdWx0cy5oZWFkZXJzLnBvc3RbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7IC8vIOivt+axguWJjeaLpuaIquWZqAoKJGh0dHAuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGZ1bmN0aW9uIChjb25maWcpIHsKICAvLyBjb25zb2xlLmxvZygn6K+35rGC5YmNbG9hZGluZy4uLicpCiAgY29uZmlnLmhlYWRlcnMgPSB7CiAgICAnQXV0aG9yaXphdGlvbic6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpLAogICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogIH07CiAgcmV0dXJuIGNvbmZpZzsKfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgLy/or7fmsYLplJnor6/ml7blgZrkupvkuosKICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwp9KTsgLy8g6K+35rGC5ZCO5oum5oiqCgokaHR0cC5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkgewogIGlmIChyZXNwb25zZS5zdGF0dXMgIT0gMjAwKSB7CiAgICBjb25zb2xlLmxvZygn5ZWK5YG277yB5pat572R5LqGLi4uJyk7CiAgfSAvL+WOu+ivt+axgueKtuaAgeeggQogIC8vIHN0YXR1c0NvZGUocmVzcG9uc2UuZGF0YS5jb2RlLCByZXNwb25zZS5kYXRhLm1zZywgcmVzcG9uc2UpOwogIC8vIGNvbnNvbGUubG9nKCfor7fmsYLnu5PmnZ8g5YWz6ZetbG9hZGluZycpCgoKICByZXR1cm4gcmVzcG9uc2UuZGF0YTsKfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgLy8gY29uc29sZS5sb2coJ+ivt+axgue7k+adnyDlhbPpl61sb2FkaW5nIScpCiAgY29uc29sZS5sb2coJ+acjeWKoeWHuueOsOmUmeivr++8jOivt+eojeWQjuWGjeivlSEnKTsKfSk7CmV4cG9ydCBkZWZhdWx0ICRodHRwOw=="},{"version":3,"sources":["/Users/suhang/Template/tradingview/demo2/src/request/index.js"],"names":["axios","mockConfig","$http","create","baseURL","process","env","VUE_APP_URL","timeout","defaults","headers","post","interceptors","request","use","config","localStorage","getItem","error","Promise","reject","response","status","console","log","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB,C,CAAuC;AACvC;;AAEA,IAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAEH,UAAU,GAAG,EAAH,GAAQI,OAAO,CAACC,GAAR,CAAYC,WADhB;AAEvBC,EAAAA,OAAO,EAAE,OAAO;AAFO,CAAb,CAAd,C,CAIA;;AACAN,KAAK,CAACO,QAAN,CAAeC,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA8C,mCAA9C,C,CAEA;;AACAT,KAAK,CAACU,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACI,UAAAC,MAAM,EAAI;AACN;AACAA,EAAAA,MAAM,CAACL,OAAP,GAAiB;AACb,qBAAiBM,YAAY,CAACC,OAAb,CAAqB,OAArB,CADJ;AAEb,oBAAgB;AAFH,GAAjB;AAIA,SAAOF,MAAP;AACH,CARL,EASI,UAAAG,KAAK,EAAI;AACL;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAZL,E,CAeA;;AACAhB,KAAK,CAACU,YAAN,CAAmBS,QAAnB,CAA4BP,GAA5B,CACI,UAAAO,QAAQ,EAAI;AACR,MAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAvB,EAA4B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACF,GAHO,CAIR;AACA;AACA;;;AACA,SAAOH,QAAQ,CAACI,IAAhB;AACH,CATL,EAUI,UAAAP,KAAK,EAAI;AACL;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,CAbL;AAgBA,eAAetB,KAAf","sourcesContent":["import axios from 'axios';\nimport mockConfig from './mock/config';//mock模拟器配置\n// import statusCode from './statusCode';\n\nconst $http = axios.create({\n    baseURL: mockConfig ? '' : process.env.VUE_APP_URL,\n    timeout: 1000 * 12\n});\n// 设置post请求头\n$http.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\n// 请求前拦截器\n$http.interceptors.request.use(\n    config => {\n        // console.log('请求前loading...')\n        config.headers = {\n            'Authorization': localStorage.getItem('token'),\n            'Content-Type': 'application/json'\n        };\n        return config;\n    },\n    error => {\n        //请求错误时做些事\n        return Promise.reject(error);\n    }\n);\n\n// 请求后拦截\n$http.interceptors.response.use(\n    response => {\n        if (response.status != 200) {\n           console.log('啊偶！断网了...')\n        }\n        //去请求状态码\n        // statusCode(response.data.code, response.data.msg, response);\n        // console.log('请求结束 关闭loading')\n        return response.data;\n    },\n    error => {\n        // console.log('请求结束 关闭loading!')\n        console.log('服务出现错误，请稍后再试!')\n    }\n);\n\nexport default $http;"]}]}